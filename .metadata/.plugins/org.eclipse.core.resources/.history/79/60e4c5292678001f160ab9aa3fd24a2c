package com.monocept.myapp.service;

import java.time.LocalDateTime;
import java.util.UUID;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.monocept.myapp.entity.EmailVerificationToken;
import com.monocept.myapp.entity.User;
import com.monocept.myapp.exception.GuardianLifeAssuranceApiException;
import com.monocept.myapp.repository.AdminRepository;
import com.monocept.myapp.repository.AgentRepository;
import com.monocept.myapp.repository.CustomerRepository;
import com.monocept.myapp.repository.EmployeeRepository;
import com.monocept.myapp.repository.TokenRepository;
import com.monocept.myapp.repository.UserRepository;

@Service
public class EmailVerificationTokenServiceImpl implements EmailVerificationTokenService {
	
	private UserRepository userRepository;
	
	private AdminRepository adminRepository;
	
	private AgentRepository agentRepository;
	
	private CustomerRepository customerRepository;
	
	private EmployeeRepository employeeRepository;
	
	private TokenRepository tokenRepository;
	
	

	public EmailVerificationTokenServiceImpl(UserRepository userRepository, AdminRepository adminRepository,
			AgentRepository agentRepository, CustomerRepository customerRepository,
			EmployeeRepository employeeRepository,TokenRepository tokenRepository) {
		super();
		this.userRepository = userRepository;
		this.adminRepository = adminRepository;
		this.agentRepository = agentRepository;
		this.customerRepository = customerRepository;
		this.employeeRepository = employeeRepository;
		this.tokenRepository=tokenRepository;
	}



	@Override
	public EmailVerificationToken createVerificationToken(String email) {
		 User user = userRepository.findByEmail(email)
			        .orElseThrow(() -> new GuardianLifeAssuranceApiException(HttpStatus.BAD_REQUEST, 
			            "No account associated with the provided email address: " + email));
		 String token = UUID.randomUUID().toString();
	        EmailVerificationToken verificationToken = new EmailVerificationToken();
	        verificationToken.setUser(user);
	        verificationToken.setToken(token);
	        verificationToken.setExpiryDate(LocalDateTime.now().plusMinutes(15));
	        return tokenRepository.save(verificationToken);
	}

}
